// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: getPostforUser.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getPostsforUser = `-- name: GetPostsforUser :many
SELECT a.id, a.created_at, a.updated_at, a.title, a.url, a.description, a.published_at, a.feed_id, b.name from posts as a
INNER JOIN feeds as b on a.feed_id = b.id
INNER JOIN feed_follows as c on b.id = c.feed_id
WHERE c.user_id = $1
ORDER BY published_at DESC
LIMIT $2
`

type GetPostsforUserParams struct {
	UserID uuid.UUID
	Limit  int32
}

type GetPostsforUserRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       sql.NullString
	Url         string
	Description sql.NullString
	PublishedAt sql.NullTime
	FeedID      uuid.UUID
	Name        string
}

func (q *Queries) GetPostsforUser(ctx context.Context, arg GetPostsforUserParams) ([]GetPostsforUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsforUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsforUserRow
	for rows.Next() {
		var i GetPostsforUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.FeedID,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
